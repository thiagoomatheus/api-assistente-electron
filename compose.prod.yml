version: '3.9'
services:
  # Evolution API Service
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api-lite:v2.1.2
    restart: always
    ports:
      - "8083:8080"
    volumes:
      - evolution_instances:/evolution/instances
    environment:
      - SERVICE_FQDN_EVO_8080
      - SERVER_URL=${URL_EVOLUTION_API}
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=evolution_api
      - DATABASE_CONNECTION_URI=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=evolution_api
      - DATABASE_PROVIDER=postgresql
      - DATABASE_SAVE_DATA_INSTANCE=true
      - DATABASE_SAVE_DATA_NEW_MESSAGE=true
      - DATABASE_SAVE_MESSAGE_UPDATE=true
      - DATABASE_SAVE_DATA_CONTACTS=true
      - DATABASE_SAVE_DATA_CHATS=true
      - DATABASE_SAVE_DATA_LABELS=true
      - DATABASE_SAVE_DATA_HISTORIC=true
      - CONFIG_SESSION_PHONE_CLIENT=typebot-sed
      - CONFIG_SESSION_PHONE_NAME=Chrome
      - CONFIG_SESSION_PHONE_VERSION=${BAILEYS_VERSION}
      - AUTHENTICATION_API_KEY=${SERVICE_BASE64_128_EVOLUTION}
      - CACHE_REDIS_ENABLED=true
      - CACHE_REDIS_URI=redis://redis:6379/6
      - CACHE_REDIS_PREFIX_KEY=evolutionv2
      - CACHE_REDIS_SAVE_INSTANCES=false
      - CACHE_LOCAL_ENABLED=false
    depends_on:
      - postgres
      - redis
    networks:
      - api-electron

  redis:
    image: 'redis:latest'
    command: "redis-server --port 6379 --appendonly yes\n"
    restart: always
    volumes:
      - 'evolution_redis:/data'
    ports:
      - "6379:6379"
    networks:
      - api-electron

  # Postgres Service
  postgres:
    container_name: postgres
    image: postgres:16
    command: ["postgres", "-c", "max_connections=1000", "-c", "listen_addresses=*"]
    restart: always
    ports:
      - 5432:5432
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB:-postgres}
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_USER=${SERVICE_USER_POSTGRES}
      - DB_POSTGRESDB_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_USER=${SERVICE_USER_POSTGRES}
      - POSTGRES_PASSWORD=${SERVICE_PASSWORD_POSTGRES}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - 
    volumes:
      - ./postgres-init-scripts:/docker-entrypoint-initdb.d/init-schemas.sql
      - postgres_data:/var/lib/postgresql/data
    expose:
      - 5432
    networks:
      - api-electron

  # API Service
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=api_scheme
    ports:
      - "3333:3333"
    environment:
      - DATABASE_URL=postgresql://${SERVICE_USER_POSTGRES}:${SERVICE_PASSWORD_POSTGRES}@postgres:5432/${POSTGRES_DB:-postgres}?schema=api_scheme
      - JWT_SECRET=${SERVICE_BASE64_128_JWTSECRET}
      - JWT_EXPIRES_IN=1800
      - NODE_ENV=production
      - GEMINI_API_KEY=${SERVICE_GEMINI_API_KEY_PROD}
      - API_HOST=${API_HOST}
      - INSTANCIA_EVO=${SERVICE_USER_EVO}
      - EVOLUTION_API_URL=${URL_EVOLUTION_API}
    depends_on:
      - postgres
    networks:
      - api-electron

volumes:
  evolution_instances:
  evolution_redis:
  postgres_data:

networks:
  api-electron:
    name: api-electron
    driver: bridge
    external: true